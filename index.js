var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var FirebaseCrashlyticsOriginal = /** @class */ (function (_super) {
    __extends(FirebaseCrashlyticsOriginal, _super);
    function FirebaseCrashlyticsOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseCrashlyticsOriginal.prototype.initialise = function () { return cordova(this, "initialise", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.crash = function () { return cordova(this, "crash", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.logPriority = function (priority, tag, message) { return cordova(this, "logPriority", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.log = function (message) { return cordova(this, "log", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.logException = function (message) { return cordova(this, "logException", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.setString = function (key, value) { return cordova(this, "setString", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.setBool = function (key, value) { return cordova(this, "setBool", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.setDouble = function (key, value) { return cordova(this, "setDouble", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.setFloat = function (key, value) { return cordova(this, "setFloat", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.setInt = function (key, value) { return cordova(this, "setInt", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.prototype.setUserIdentifier = function (identifier) { return cordova(this, "setUserIdentifier", { "sync": true }, arguments); };
    FirebaseCrashlyticsOriginal.pluginName = "FirebaseCrashlytics";
    FirebaseCrashlyticsOriginal.plugin = "cordova-plugin-firebase-crashlytics-fixed";
    FirebaseCrashlyticsOriginal.pluginRef = "FirebaseCrashlytics";
    FirebaseCrashlyticsOriginal.repo = "https://github.com/rapinto/cordova-plugin-firebase-crashlytics";
    FirebaseCrashlyticsOriginal.install = "ionic cordova plugin add cordova-plugin-firebase-crashlytics-fixed --variable ANDROID_FIREBASE_CORE_VERSION=16.0.0";
    FirebaseCrashlyticsOriginal.installVariables = ["ANDROID_FIREBASE_CORE_VERSION"];
    FirebaseCrashlyticsOriginal.platforms = ["Android", "iOS"];
    return FirebaseCrashlyticsOriginal;
}(IonicNativePlugin));
var FirebaseCrashlytics = new FirebaseCrashlyticsOriginal();
export { FirebaseCrashlytics };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZpcmViYXNlLWNyYXNobHl0aWNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQWlDL0IsdUNBQWlCOzs7O0lBU3hELHdDQUFVO0lBWVYsbUNBQUs7SUFlTCx5Q0FBVyxhQUFDLFFBQWdCLEVBQUUsR0FBVyxFQUFFLE9BQWU7SUFhMUQsaUNBQUcsYUFBQyxPQUFlO0lBYW5CLDBDQUFZLGFBQUMsT0FBZTtJQWM1Qix1Q0FBUyxhQUFDLEdBQVcsRUFBRSxLQUFhO0lBY3BDLHFDQUFPLGFBQUMsR0FBVyxFQUFFLEtBQWM7SUFjbkMsdUNBQVMsYUFBQyxHQUFXLEVBQUUsS0FBYTtJQWNwQyxzQ0FBUSxhQUFDLEdBQVcsRUFBRSxLQUFhO0lBY25DLG9DQUFNLGFBQUMsR0FBVyxFQUFFLEtBQWE7SUFhakMsK0NBQWlCLGFBQUMsVUFBa0I7Ozs7Ozs7OzhCQW5MdEM7RUFrQ3lDLGlCQUFpQjtTQUE3QyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBGaXJlYmFzZSBDcmFzaGx5dGljc1xuICogQGRlc2NyaXB0aW9uXG4gKiBBIEdvb2dsZSBGaXJlYmFzZSBDcmFzaGx5dGljcyBwbHVnaW4gdG8gZW5hYmxlIGNhcHR1cmUgb2YgY3Jhc2ggcmVwb3J0cy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEZpcmViYXNlQ3Jhc2hseXRpY3MgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ZpcmViYXNlLWNyYXNobHl0aWNzL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmlyZWJhc2VDcmFzaGx5dGljczogRmlyZWJhc2VDcmFzaGx5dGljcykgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIGNvbnN0IGNyYXNobHl0aWNzID0gdGhpcy5maXJlYmFzZUNyYXNobHl0aWNzLmluaXRpYWxpc2UoKTtcbiAqIGNyYXNobHl0aWNzLmxvZ0V4Y2VwdGlvbignbXkgY2F1Z2h0IGV4Y2VwdGlvbicpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0ZpcmViYXNlQ3Jhc2hseXRpY3MnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1jcmFzaGx5dGljcycsXG4gIHBsdWdpblJlZjogJ0ZpcmViYXNlQ3Jhc2hseXRpY3MnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1JlYWxseVNtYWxsU29mdHdhcmUvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtY3Jhc2hseXRpY3MnLFxuICBpbnN0YWxsOlxuICAgICdpb25pYyBjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtY3Jhc2hseXRpY3MgLS12YXJpYWJsZSBBTkRST0lEX0ZJUkVCQVNFX0NPUkVfVkVSU0lPTj0xNi4wLjAnLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ0FORFJPSURfRklSRUJBU0VfQ09SRV9WRVJTSU9OJ10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUNyYXNobHl0aWNzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogU2ltcGx5IGFkZCB0aGUgcGx1Z2luIHRvIGdldCB0aGUgZGVmYXVsdCBDcmFzaGx5dGljcyBmdW5jdGlvbmFsaXR5LiBOb3RlIHRoYXQgY3Jhc2hlcyBhbmQgbG9nZ2VkIGV4Y2VwdGlvbnMgd2lsbCBvbmx5IGJlIHJlcG9ydGVkIHdoZW4gdGhlIGFwcGxpY2F0aW9uIHJlc3RhcnRzLiBJbiBvcmRlciB0byBsb2cgY2F1Z2h0IGV4Y2VwdGlvbnMgdGhlIGZvbGxvd2luZyBjYW4gYmUgdXNlZDpcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgaW5pdGlhbGlzZSgpOiBhbnkge1xuICAgIHJldHVybjsgLy8gV2UgYWRkIHJldHVybjsgaGVyZSB0byBhdm9pZCBhbnkgSURFIC8gQ29tcGlsZXIgZXJyb3JzXG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBmb3JjZWQgY3Jhc2guIFZpc2libGUgaW4gY29uc29sZSBhZnRlciByZXN0YXJ0IG9mIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBjcmFzaCgpOiB2b2lkIHtcbiAgICByZXR1cm47IC8vIFdlIGFkZCByZXR1cm47IGhlcmUgdG8gYXZvaWQgYW55IElERSAvIENvbXBpbGVyIGVycm9yc1xuICB9XG5cbiAgLyoqXG4gICAqIExvZyBhIHByaW9yaXR5IG1lc3NhZ2UuIFdpbGwgb25seSBiZSBsb2dnZWQgaW4gdGhlIGV2ZW50IG9mIGEgY3Jhc2guXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmlvcml0eVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGxvZ1ByaW9yaXR5KHByaW9yaXR5OiBudW1iZXIsIHRhZzogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTG9nIGEgbWVzc2FnZS4gV2lsbCBvbmx5IGJlIGxvZ2dlZCBpbiB0aGUgZXZlbnQgb2YgYSBjcmFzaC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgbG9nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2cgd2hlbiBhIGhhbmRsZWQgZXhjZXB0aW9uIGhhcyBoYXBwZW5lZC4gVmlzaWJsZSBpbiBjb25zb2xlIGFmdGVyIHJlc3RhcnQgb2YgYXBwbGljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIGxvZ0V4Y2VwdGlvbihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IGV4dHJhIGtleS92YWx1ZSBzdHJpbmcgdmFsdWUuIFdpbGwgb25seSBiZSBsb2dnZWQgaW4gdGhlIGV2ZW50IG9mIGEgY3Jhc2guXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIHNldFN0cmluZyhrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZXh0cmEga2V5L3ZhbHVlIGJvb2wgdmFsdWUuIFdpbGwgb25seSBiZSBsb2dnZWQgaW4gdGhlIGV2ZW50IG9mIGEgY3Jhc2guXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzeW5jOiB0cnVlLFxuICB9KVxuICBzZXRCb29sKGtleTogc3RyaW5nLCB2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZXh0cmEga2V5L3ZhbHVlIGRvdWJsZSB2YWx1ZS4gV2lsbCBvbmx5IGJlIGxvZ2dlZCBpbiB0aGUgZXZlbnQgb2YgYSBjcmFzaC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgc2V0RG91YmxlKGtleTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBleHRyYSBrZXkvdmFsdWUgZmxvYXQgdmFsdWUuIFdpbGwgb25seSBiZSBsb2dnZWQgaW4gdGhlIGV2ZW50IG9mIGEgY3Jhc2guXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIHNldEZsb2F0KGtleTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBleHRyYSBrZXkvdmFsdWUgaW50ZWdlciB2YWx1ZS4gV2lsbCBvbmx5IGJlIGxvZ2dlZCBpbiB0aGUgZXZlbnQgb2YgYSBjcmFzaC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZSxcbiAgfSlcbiAgc2V0SW50KGtleTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgaWRlbnRpZmllciBmb3IgdGhlIHVzZXIuIFRha2UgY2FyZSB3aGVuIHVzaW5nIHRoaXMgbWV0aG9kIGFuZCBlbnN1cmUgeW91IHByaXZhY3kgcG9saWN5IGlzIHVwZGF0ZWQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZGVudGlmaWVyXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN5bmM6IHRydWUsXG4gIH0pXG4gIHNldFVzZXJJZGVudGlmaWVyKGlkZW50aWZpZXI6IHN0cmluZyk6IHZvaWQge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19